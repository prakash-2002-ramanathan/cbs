Exp6.py
from Crypto.PublicKey import ECC
from Crypto.Signature import DSS
from Crypto.Hash import SHA256
def init_keys(curve, format):
key = ECC.generate(curve = curve)
with open('prkey.pem', 'w') as prfile, open('pukey.pem', 'w') as pufile:
prfile.write(key.export_key(format = format))
pufile.write(key.public_key().export_key(format = format))
def get_signature(message, key, mode):
digest = SHA256.new(message)
signer = DSS.new(key, mode)
signature = signer.sign(digest)
return signature
def verify(message, key, mode, signature):
digest = SHA256.new(message)
verifier = DSS.new(key, mode)
try:
verifier.verify(digest, signature)
except ValueError:
return False
else:
return True
def main():
CURVE = 'P-256'
FORMAT = 'PEM'
MESSAGE_SENDER = b'Bravo-6, going dark.'
MESSAGE_RECEIVER = b'Bravo-6, going ark.'
MODE = 'fips-186-3'
init_keys(CURVE, FORMAT)
with open('prkey.pem') as prfile, open('pukey.pem') as pufile:
prkey = ECC.import_key(prfile.read())
pukey = ECC.import_key(pufile.read())
signature = get_signature(MESSAGE_SENDER, prkey, MODE)
status = verify(MESSAGE_RECEIVER, pukey, MODE, signature)
print('Authentic') if status else print('Not Authentic')
if __name__ == '__main__':
main()




Ex.No: 9
Date:
AIM:
To demonstrate Intrusion Detection System (IDS) using Snort software tool.
PROCEDURE:
1. Download Snort from the Snort.org website. (http://www.snort.org/snortdownloads)
2. Download Rules(https://www.snort.org/snort-rules). You must register to get the
rules. (You should download these often)
3. Double click on the .exe to install snort. This will install snort in the “C:\Snort”
folder. It is important to have WinPcap (https://www.winpcap.org/install/)installed
4. Extract the Rules file. You will need WinRAR for the .gzfile.
5. Copy all files from the “rules” folder of the extracted folder. Now paste the rules 
into “C:\Snort\rules” folder.
6. Copy “snort.conf” file from the “etc” folder of the extracted folder. You must
paste it into “C:\Snort\etc” folder. Overwrite any existing file. Remember if you 
modify your snort.conf file and download a new file, you must modify it for Snort 
to work.
7. Open a command prompt (cmd.exe) and navigate to folder “C:\Snort\bin” folder. 
(at the Prompt, type cd\snort\bin)
8. To start (execute) snort in sniffer mode use following command:
snort -dev -i3
-i indicates the interface number. You must pick the correct interface number. In my 
case, it is 3.
-dev is used to run snort to capture packets on your network.
DEMONSTRATION OF INTRUSION DETECTION 
SYSTEM (IDS)
To check the interface list, use following command:
snort -W
Finding an interface
You can tell which interface to use by looking at the Index number and finding
Microsoft. As you can see in the above example, the other interfaces are for
VMWare. My interface is 3.
9. To run snort in IDS mode, you will need to configure the file“snort.conf”
according to your networkenvironment.
10. To specify the network address that you want to protect in snort.conf file,look
for the following line.
var HOME_NET 192.168.1.0/24 (You will normally see any here)
11. You may also want to set the addresses ofDNS_SERVERS, if you have some on 
yournetwork.
Example:
example snort
12. Change the RULE_PATH variable to the path of rulesfolder. var 
RULE_PATHc:\snort\rules path to rules
13. Change the path of all library files with the name and path on your system.and
you must changethepath of snort_dynamicpreprocessorvariable.
C:\Snort\lib\snort_dynamiccpreprocessor
You need to do this to all library files in the “C:\Snort\lib” folder. The old path might 
be: “/usr/local/lib/…”. you willneedto replace that path with your system path. Using 
C:\Snort\lib
14. Change the path of the “dynamicengine” variable value in the“snort.conf” file.
Example:
dynamicengine C:\Snort\lib\snort_dynamicengine\sf_engine.dll
15 Add the paths for “include classification.config” and “include reference.config”
files.
include c:\snort\etc\classification.config
include c:\snort\etc\reference.config
16. Remove the comment (#) on the line to allow ICMP rules, if it iscommented with 
a#.
include $RULE_PATH/icmp.rules
17. You can also remove the comment of ICMP-info rules comment, if it is
commented.
include $RULE_PATH/icmp-info.rules
18. To add log files to store alerts generated by snort, search for the “outputlog” test 
in snort.conf and add the followingline:
output alert_fast: snort-alerts.ids
19. Comment (add a #) the whitelist $WHITE_LIST_PATH/white_list.rules and the
blacklist
Change the nested_ip inner , \ to nested_ip inner #, \
20. Comment out (#) following lines:
#preprocessornormalize_ip4
#preprocessor normalize_tcp: ipsecnstream
#preprocessor normalize_icmp4
#preprocessornormalize_ip6
#preprocessor normalize_icmp6
21. Save the “snort.conf”file.
22. To start snort in IDS mode, run the followingcommand:
snort -c c:\snort\etc\snort.conf -l c:\snort\log -i 3
If a log is created, select the appropriate program to open it. You can use WordPard 
or NotePad++ to read the file.
To generate Log files in ASCII mode, you can use following command while
running snort in IDS mode:
snort -A console -i3 -c c:\Snort\etc\snort.conf -l c:\Snort\log -K ascii
23. Scan the computer that is running snort from another computer by usingPING or 
NMap (ZenMap). After scanning or during the scan you can check the snortalerts.ids file in the log folder to insure it is logging properly. You will see IP address 
folders appear
OUTPUT:
RESULT:
Thus the Intrusion Detection System (IDS) has been demonstrated by using
the Open Source Snort Intrusion Detection Tool.




def receiver(YA,XB,q):
return YA**XB%q
def sender(YB,XA,q):
return YB**XA%q
def main():
q= int(input("Enter the prime number(q): "))
alpha = int(input("Enter the primitive root (alpha): "))
XA = int(input("Enter Sender Secret Key(XA): "))
XB= int(input("Enter Receiver Secret Key:(XB) "))
YA = alpha**XA%q
YB= alpha**XB%q
print("Receiver Public Key :(KAB)", receiver(YA,XB,q))
print("Sender Public Key (KAB): ", sender(YB,XA,q))
main()





from Crypto.Hash import SHA1
hash_obj1 = SHA1.new()
hash_obj2 = SHA1.new()
with open('file1.txt', 'rb') as file1, open('file2.txt', 'rb') as file2:
content1 = file1.read()
content2 = file2.read()
hash_obj1.update(content1)
hash_obj2.update(content2)
hexdigest1 = hash_obj1.hexdigest()
hexdigest2 = hash_obj2.hexdigest()
print(f'Digest of file#1: {hexdigest1}')
print(f'Digest of file#2: {hexdigest2}')
print('Contents match') if hexdigest1 == hexdigest2 else print('Contents mismatch')



